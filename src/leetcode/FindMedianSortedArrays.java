package leetcode;

import java.util.Arrays;

/**
 * FindMedianSortedArrays
 *
 * @author huifei.liu@hand-chian.com
 * Date: 2019-07-27
 * Description: 寻找中位数
 */

public class FindMedianSortedArrays {


    /**
     * 1,2,3,4,6,7,8
     * 3,6,7,8,12,15,17
     * k = 7; a,b = 0
     * i = k/2 => 3;
     * ia = i + a - 1 =  2;
     * ib = i + b - 1 =  2;
     * 1,2,3 and 3,6,7 -> 3 < 7 --> a = ia + 1 == 3;
     * <p>
     * k = k - i = 4;
     * i = k / 2 = 2;
     * ia = i + a - 1 =  4;  6
     * ib = i + b - 1 =  1;  6
     * 6 == 6 , a = ia + 1 = 5;
     * <p>
     * k = k - i = 2;
     * i = k / 2 = 1;
     * ia = i + a -1 = 5;
     * ib = i + b - 1 = 0;
     * 7, 3 = 7 > 3 ==> b = ib + 1 = 1;
     * <p>
     * k = k - i = 1;
     * i = k / 2 = 0;
     * <p>
     * <p>
     * a = 3, b = 0;
     * 4, 3 => 4 > 3 ==> b + k = 1;
     *
     * @param args
     */
    public static void main(String[] args) {

//        int[] a = {16,45,52,74,93,102,251,274,341,392,415,490,502,528,530,633,772,773,836,853,858,999,1014,1034,1116,1169,1217,1291,1349,1397,1455,1458,1462,1495,1518,1561,1576,1613,1667,1767,1776,1832,1892,1960,2016,2079,2107,2126,2220,2324,2338,2372,2426,2558,2563,2587,2705,2713,2721,2758,2766,2859,2872,2936,3053,3086,3116,3158,3160,3179,3245,3280,3291,3337,3462,3586,3593,3623,3632,3635,3698,3716,3906,3952,3981,4005,4021,4031,4051,4096,4102,4103,4166,4195,4230,4240,4283,4294,4432,4433,4520,4555,4583,4603,4629,4632,4635,4714,4729,4788,4889,4944,4959,4962,4999,5020,5035,5053,5080,5104,5114,5125,5135,5144,5184,5287,5290,5293,5302,5329,5366,5398,5435,5454,5546,5618,5661,5675,5807,5824,5852,5871,5887,5894,5926,5977,6000,6112,6131,6149,6161,6178,6243,6385,6427,6450,6469,6527,6552,6588,6694,6700,6761,6767,6791,6921,6926,6964,7027,7113,7132,7132,7175,7183,7231,7309,7316,7337,7376,7411,7451,7454,7522,7634,7635,7667,7704,7743,7744,7803,8028,8082,8119,8165,8189,8238,8239,8265,8333,8352,8463,8566,8583,8640,8706,8793,8827,8834,8860,9035,9037,9120,9129,9164,9271,9304,9309,9309,9312,9326,9363,9480,9493,9512,9560,9685,9737,9754,9905,10040,10049,10078,10116,10206,10252,10260,10351,10397,10482,10510,10572,10602,10606,10677,10698,10720,10732,10797,10826,10900,10937,10939,10954,10955,11001,11013,11122,11125,11167,11241,11242,11254,11269,11276,11313,11333,11353,11356,11356,11515,11585,11769,11791,11795,11918,11988,12031,12100,12110,12183,12203,12281,12301,12330,12401,12417,12432,12461,12480,12520,12522,12703,12723,12768,12893,12972,12975,13000,13022,13119,13178,13241,13297,13330,13339,13365,13449,13457,13468,13498,13502,13549,13589,13625,13674,13850,13905,13910,13957,13964,13995,14127,14204,14212,14213,14344,14357,14362,14376,14395,14400,14413,14445,14521,14615,14646,14672,14673,14683,14749,14772,14777,14780,14789,14891,14945,14975,14986,15005,15030,15084,15097,15107,15195,15260,15266,15372,15377,15415,15431,15486,15539,15581,15659,15705,15803,15850,15858,15952,15989,16107,16385,16450,16451,16517,16566,16669,16703,16710,16839,16874,16903,16903,16908,16959,16982,16994,16999,17030,17036,17175,17193,17203,17214,17222,17313,17313,17366,17429,17453,17510,17532,17709,17772,17836,17838,17874,17930,17969,17996,17996,18051,18061,18083,18154,18158,18167,18167,18175,18203,18238,18325,18380,18435,18445,18454,18497,18656,18685,18710,18723,18730,18740,18750,18803,18809,18845,18882,18966,19032,19040,19084,19157,19287,19327,19343,19372,19378,19420,19494,19579,19611,19625,19628,19641,19679,19685,19758,19808,19811,19869,20089,20112,20316,20317,20332,20376,20392,20398,20405,20443,20536,20545,20611,20718,20726,20735,20743,20839,20903,20935,20945,20961,20962,20998,21009,21162,21174,21174,21216,21222,21271,21329,21384,21483,21555,21590,21618,21618,21768,21776,21788,21858,21860,21876,21877,21884,21951,21986,22126,22137,22197,22213,22249,22268,22308,22377,22513,22541,22607,22627,22630,22644,22790,22800,22825,22921,22959,22973,22991,23014,23115,23151,23170,23219,23273,23364,23412,23528,23542,23602,23607,23660,23674,23709,23725,23739,23773,23775,23847,23914,23916,23929,23949,23999,24021,24102,24257,24271,24319,24413,24599,24606,24627,24702,24804,24881,24904,24907,24914,24921,24932,25133,25168,25260,25270,25384,25450,25549,25641,25644,25646,25660,25683,25685,25760,25773,25833,25864,25926,25953,25956,26031,26052,26055,26095,26105,26133,26171,26180,26209,26222,26243,26267,26286,26302,26356,26411,26486,26623,26675,26763,26800,26801,26856,26972,27002,27032,27286,27320,27326,27339,27346,27347,27394,27409,27419,27425,27547,27621,27671,27735,27741,27767,27770,27787,27834,27852,27852,27909,27922,27939,27998,28012,28038,28120,28200,28222,28245,28253,28261,28360,28399,28481,28627,28703,28732,28761,28803,28803,28824,28907,28945,28957,28985,29122,29244,29249,29338,29358,29376,29447,29544,29546,29599,29614,29627,29670,29684,29710,29772,29801,29814,29844,29934,29949,29991,30033,30096,30235,30242,30351,30493,30509,30574,30575,30583,30656,30817,30849,30864,30878,30885,30890,30893,30933,30936,30969,30988,31004,31094,31140,31176,31230,31241,31242,31250,31268,31272,31423,31509,31567,31678,31709,31717,31902,31977,31989,32000,32043,32106,32138,32198,32214,32305,32402,32421,32482,32554,32561,32573,32672,32747};
//        int[] b = {512,757,843,870,1037,1464,1868,1955,1968,2091,2249,2553,2607,2644,2836,2936,3226,3378,3639,3743,3874,3998,4091,4304,4401,4732,5224,5443,5659,6108,6730,6996,7636,7849,7990,8188,8194,8532,9103,9131,9148,9207,9483,9555,9648,9856,10390,10789,10801,11005,11024,11571,11615,12250,12285,12834,13025,13346,13549,13616,13758,13760,14156,14173,14414,14475,14562,14842,15062,15125,15212,15235,15369,15551,15646,15756,15998,16082,16225,16434,17026,17317,17893,18249,18353,18600,19505,20080,20272,20834,21596,21701,21758,21768,22271,22314,22341,22785,22790,22927,22934,23182,23406,23478,23493,23909,24093,24342,24670,24680,25708,25904,25974,25993,26023,26326,26753,26867,27001,27082,27231,27353,27484,27886,28150,28317,28623,28666,28679,29147,29196,29246,29361,29635,29763,29821,30176,30294,30296,30481,30609,31093,31099,31281,31634,31830,31975,32047,32071,32100,32297,32753};
//        asserted(a, b, 16082.0);
//
//        int[] nums29 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22};
//        int[] nums30 = {0, 6};
//        asserted(nums29, nums30, 10.5);

        int[] nums1 = {1, 3};
        int[] nums2 = {2};
        int[] nums3 = {1, 2};
        int[] nums4 = {3, 5};
        int[] nums5 = {1, 2};
        int[] nums6 = {-1, 3};
        int[] nums7 = {2};
        int[] nums8 = {1, 3, 4, 5, 6, 7};
        int[] nums9 = {2};
        int[] nums10 = {1, 3, 4, 5, 6, 7, 8};
        int[] nums11 = {3};
        int[] nums12 = {-2, -1};
//        asserted(nums1, nums2, 2);
//        asserted(nums3, nums4, 2.5);
//        asserted(nums5, nums6, 1.5);
        asserted(nums7, nums8, 4);
        asserted(nums9, nums10, 4.5);
        asserted(nums11, nums12, -1);

        int[] nums13 = {2};
        int[] nums14 = {1, 3, 4};
        asserted(nums13, nums14, 2.5);

        int[] nums15 = {2};
        int[] nums16 = {-5, -3, -1};
        asserted(nums15, nums16, -2);

        int[] nums17 = {1, 3};
        int[] nums18 = {2, 4, 5, 6, 7, 8};
        asserted(nums17, nums18, 4.5);


        int[] nums19 = {4};
        int[] nums20 = {1, 2, 3, 5};
        asserted(nums19, nums20, 3);

        int[] nums21 = {2, 3};
        int[] nums22 = {1, 4, 5};
        asserted(nums21, nums22, 3);

        int[] nums23 = {5, 6};
        int[] nums24 = {1, 2, 3, 4, 7};
        asserted(nums23, nums24, 4);

        int[] nums25 = {6};
        int[] nums26 = {1, 2, 3, 4, 5, 7, 8};
        asserted(nums25, nums26, 4.5);

        int[] nums27 = {5};
        int[] nums28 = {1, 2, 3, 4, 6, 7, 8, 9};
        asserted(nums27, nums28, 5);


    }

    static boolean asserted(int[] nums1, int[] nums2, double answer) {
        System.out.println();
        System.out.println(Arrays.toString(nums1));
        System.out.println(Arrays.toString(nums2));
        double result;
        try {
            result = findMedianSortedArrays(nums1, nums2);
        } catch (Exception e) {
            System.out.println("Error. " + "Nil = " + answer);
            e.printStackTrace();
            return false;
        }
        if (result == answer) {
            System.out.println("Right. " + result + " = " + answer);
            return false;
        } else {
            System.out.println("Wrong! " + result + " != " + answer);
            return false;
        }
    }

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {

        int nums1L = nums1.length;
        int nums2L = nums2.length;
        // 其中一个为空的情况
        if (nums1L == 0 && nums2L != 0) {
            return sortedArrayMid(nums2, nums2L);
        } else if (nums1L != 0 && nums2L == 0) {
            return sortedArrayMid(nums1, nums1L);
        }

        // 两个都不为空的情况, 但是连续
        if (nums1[nums1L - 1] <= nums2[0]) {
            return sortedArrayMid(nums1, nums2);
        } else if (nums2[nums2L - 1] <= nums1[0]) {
            return sortedArrayMid(nums2, nums1);
        }
        // 常规情况
        int total = nums1L + nums2L; // 总数
        int half = total / 2; // 一半
        int a = 0, b = 0; // 索引记录
        boolean odd = total % 2 == 1; // 总和是否为奇数
        int k = odd ? half + 1 : half; // 要寻找的目标索引
        int i; // 迭代索引增量 总是为k的一半, 可以理解为k的二分查找
        while ((i = k / 2) != 0) {
            int ia = a + i - 1;
            int ib = b + i - 1;
            if (ia > nums1L - 1) {
                ia = nums1L - 1;
            }
            if (ib > nums2L - 1) {
                ib = nums2L - 1;
            }
            if (nums1[ia] < nums2[ib]) {
                if (ia + 1 == nums1L) {
                    a = ia;
                    break;
                } else {
                    a = ia + 1;
                }
            } else if (nums1[ia] > nums2[ib]) {
                if (ib + 1 == nums2L) {
                    b = ib;
                    break;
                } else {
                    b = ib + 1;
                }
            } else if (a >= b) {
                if (ia + 1 == nums1L) {
                    a = ia;
                    break;
                } else {
                    a = ia + 1;
                }
            } else {
                if (ib + 1 == nums2L) {
                    b = ib;
                    break;
                } else {
                    b = ib + 1;
                }
            }
            k = k - i;
        }
        int numa = nums1[a];
        int numb = nums2[b];
        // k != 1 说明迭代没有走完，提前截断了
        if (k != 1) {
            if (odd) {
                if (a == nums1L - 1) {
                    return nums2[half - nums1L];
                } else {
                    return nums1[half - nums2L];
                }
            }
            if (a == nums1L - 1) {
                int x = nums2[half - nums1L - 1];
                int y = nums2[half - nums1L];
                if (numa <= x || numa >= y) {
                    return ((double) x + y) / 2;
                } else {
                    return (double) (numa + y) / 2;
                }
            } else {
                int x = nums1[half - nums2L - 1];
                int y = nums1[half - nums2L];
                if (numb <= x || numb >= y) {
                    return ((double) x + y) / 2;
                } else {
                    return (double) (numb + y) / 2;
                }
            }
        } else if (odd) {
            return Math.min(numa, numb);
        } else {
            boolean aLess = numa < numb;
            int mid = aLess ? numa : numb;
            int other;
            if (aLess) {
                other = a + 1 >= nums1L ? numb : Math.min(nums1[a + 1], numb);
            } else {
                other = b + 1 >= nums2L ? numa : Math.min(numa, nums2[1 + b]);
            }
            return ((double) other + mid) / 2;
        }
    }

    static double avg(int a, int b) {
        return ((double) a + b) / 2;
    }

    /**
     * 单个集合有值的情况下
     *
     * @param nums1  集合
     * @param nums1L 集合长度
     * @return 中位数
     */
    static double sortedArrayMid(int[] nums1, int nums1L) {
        if (nums1L % 2 == 0) {
            int mid = nums1L / 2;
            return ((double) (nums1[mid - 1] + nums1[mid])) / 2;
        } else {
            return nums1[nums1L / 2];
        }
    }

    /**
     * 两个集合直接拼接有序的情况, 算法复杂度
     *
     * @param nums1 前序集合
     * @param nums2 后序集合
     * @return 中位数
     */
    static double sortedArrayMid(int[] nums1, int[] nums2) {
        int nums1L = nums1.length;
        int nums2L = nums2.length;
        int total = nums1L + nums2L;
        int half = total / 2;
        if (total % 2 == 1) {
            if (nums1L <= half) {
                return nums2[half - nums1L];
            } else {
                return nums1[half];
            }
        }
        if (nums1L > half) {
            return avg(nums1[half], nums1[half - 1]);
        } else if (nums1L < half) {
            int start = half - nums1L;
            return avg(nums2[start], nums2[start - 1]);
        } else {
            return avg(nums1[nums1L - 1], nums2[0]);
        }
    }
}
